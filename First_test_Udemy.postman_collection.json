{
	"info": {
		"_postman_id": "63168725-7763-421b-9124-75458bd77593",
		"name": "First_test_Udemy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Untitled Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2b5fa905-598d-4a16-a026-a298a4fac13b",
						"exec": [
							"//1. Correct  response format JSON",
							"pm.test(\"Correct  response format JSON\", function(){",
							"    pm.response.to.have.jsonBody()",
							"});",
							"",
							"//2. We have all the declared fields in the response",
							"pm.test(\"Check that we have all declared fields\", function(){",
							"    const jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"people\");",
							"    pm.expect(jsonData).to.have.property(\"planets\");",
							"    pm.expect(jsonData).to.have.property(\"films\");",
							"    pm.expect(jsonData).to.have.property(\"species\");",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");",
							"    pm.expect(jsonData).to.have.property(\"starships\");",
							"});",
							"",
							"//3. Field value isn't NULL",
							"pm.test(\"Check if value isn't NULL\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(null);",
							"    pm.expect(jsonData.planets).not.equal(null);",
							"    pm.expect(jsonData.films).not.equal(null);",
							"    pm.expect(jsonData.species).not.equal(null);",
							"    pm.expect(jsonData.vehicles).not.equal(null);",
							"    pm.expect(jsonData.starships).not.equal(null);",
							"});",
							"//4. Check if value isn't empty",
							"pm.test(\"Check if value isn't empty\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(\"\");",
							"    pm.expect(jsonData.planets).not.equal(\"\");",
							"    pm.expect(jsonData.films).not.equal(\"\");",
							"    pm.expect(jsonData.species).not.equal(\"\");",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");",
							"    pm.expect(jsonData.starships).not.equal(\"\");",
							"});",
							"",
							"//5.Check if field corresponds to a specific value",
							"pm.test(\"Check if field corresponds to a specific value\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.co/api/people/\");",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.co/api/planets/\");",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.co/api/films/\");",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.co/api/species/\");",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.co/api/vehicles/\");",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.co/api/starships/\");",
							"});",
							"",
							"//6. Status code is 200",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//7.Status message is ok",
							"pm.test(\"Status message is ok\", function(){",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"//8. Response time is less than 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"//9. There is a specific header in the response",
							"pm.test(\"There is a specific header in the response\", function(){",
							"    pm.response.to.have.header(\"Content-Type\")",
							"});",
							"",
							"//10. The response has a specific header with a specific value",
							"pm.test(\"The response has a specific header with a specific value\", function(){",
							"    pm.response.to.be.header(\"Content-Type\",\"application/json\")",
							"});",
							"",
							"//11. Cookie exists",
							"pm.test(\"Cookie exists\",function(){",
							"    pm.cookies.has(\"__cfduid\")",
							"});",
							"",
							"//12. Cookie has value",
							"pm.test(\"Cookie has value\", function(){",
							"    try{",
							"        var MY_COOKIE = pm.cookies.get(\"__cfduid\");",
							"        console.log(MY_COOKIE);",
							"    }catch(e){",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\"+e)",
							"    }",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9e63ea4b-15ae-4b19-9a44-9770665183d0",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    // specify the type of object",
							"    \"type\": \"object\",",
							"    //specify requires properties свойства ",
							"    \"required\": [\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],",
							"    //describe the properties",
							"    \"properties\":{",
							"        \"people\":{\"type\":\"string\"},",
							"        \"planets\":{\"type\":\"string\"},",
							"        \"films\":{\"type\":\"string\"},",
							"        \"species\":{\"type\":\"string\"},",
							"        \"vehicles\":{\"type\":\"string\"},",
							"        \"starships\":{\"type\":\"string\"},",
							"    }",
							"};",
							"pm.test('Body is correst', function(){",
							"    pm.expect(tv4.validate(data,schema)).to.be.true;",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get People",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dae83449-7dba-408a-a2f0-c6af679d906d",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"required\":[\"name\",\"homeworld\",\"films\",\"species\",\"vehicles\",\"starships\"],",
							"    \"properties\":{",
							"        \"name\":{\"type\": \"string\"},",
							"        \"homeworld\":{\"type\": \"string\"},",
							"        \"films\":{",
							"            \"type\":\"array\",",
							"            \"items\":{\"type\": \"string\"}",
							"        },",
							"       \"species\":{",
							"           \"type\":\"array\",",
							"           \"items\":{\"type\": \"string\"}",
							"       },",
							"       \"vehicles\":{",
							"           \"type\":\"array\",",
							"           \"items\":{\"type\": \"string\"}",
							"       },",
							"       \"starships\":{",
							"           \"type\":\"array\",",
							"           \"items\":{\"type\": \"string\"}",
							"       },",
							"    }",
							"    ",
							"};",
							"pm.test('Body is correst', function(){",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Basic Auth",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth with base64 encode",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"1f50b56a-9b73-404d-856e-15c4143f438d",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"1f50b56a-9b73-404d-856e-15c4143f438d",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Credentials",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": ""
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Jul 2019 04:07:30 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"af-MmpVeTvfnSW88c4riXD0uw\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=c0cdfc90ed982a48"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=d6fb007921487f7e"
						},
						{
							"key": "Content-Length",
							"value": "148"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\"\n    }\n}"
				},
				{
					"name": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Kate\"}"
						},
						"url": {
							"raw": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"1f50b56a-9b73-404d-856e-15c4143f438d",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Credentials",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": ""
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Jul 2019 04:10:32 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"af-MmpVeTvfnSW88c4riXD0uw\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=c0cdfc90ed982a48"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=d6fb007921487f7e"
						},
						{
							"key": "Content-Length",
							"value": "73"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Kate\",\n        \"status\":\"created\",\n        \"message\": \"success\"\n    }\n}"
				}
			]
		},
		{
			"name": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Kate\"}"
				},
				"url": {
					"raw": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"1f50b56a-9b73-404d-856e-15c4143f438d",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Kate\"}"
						},
						"url": {
							"raw": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"1f50b56a-9b73-404d-856e-15c4143f438d",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Credentials",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": ""
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Jul 2019 04:10:32 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"af-MmpVeTvfnSW88c4riXD0uw\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=c0cdfc90ed982a48"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=d6fb007921487f7e"
						},
						{
							"key": "Content-Length",
							"value": "73"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Kate\",\n        \"status\":\"created\",\n        \"message\": \"success\"\n    }\n}"
				},
				{
					"name": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://1f50b56a-9b73-404d-856e-15c4143f438d.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"1f50b56a-9b73-404d-856e-15c4143f438d",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Credentials",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": ""
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Expose-Headers",
							"value": ""
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Fri, 19 Jul 2019 04:07:30 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"af-MmpVeTvfnSW88c4riXD0uw\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=c0cdfc90ed982a48"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=d6fb007921487f7e"
						},
						{
							"key": "Content-Length",
							"value": "148"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\"\n    }\n}"
				}
			]
		}
	]
}